@Fatal {2025-06-25 21:00:26.2285737 GMT+2} Assertion Failed! status == 0x8CD5
  Msg: Framebuffer is incomplete!

  >> at hydro::gfx::OpenGLFramebuffer::Validate
     C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\API\OpenGl\OpenGLFramebuffer.cpp(207)
Stack trace (most recent call last):
#12   Object "", at 00007FFE6FD3259D, in BaseThreadInitThunk
#11   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_main.cpp", line 17, in mainCRTStartup
#10   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 331, in __scrt_common_main
#9    Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 288, in __scrt_common_main_seh
#8    Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 79, in invoke_main
#7    Source "C:\Users\vikto\Desktop\Hydro\Editor\src\App.cpp", line 26, in main
         23: {
         24: 	Boot();
         25: 
      >  26: 	ioc::Get().Resolve<runtime::IRuntime>()->Run();
         27: 
         28: 	return 0;
         29: }
#6    Source "C:\Users\vikto\Desktop\Hydro\Editor\src\EditorRuntime.cpp", line 85, in hydro::runtime::EditorRuntime::Run
         82:         //Shaders
         83:         shader = gfx::Shader::Create(std::filesystem::path{"Shaders/vertexShader.glsl"}, "Shaders/fragmentShader.glsl");
         84: 
      >  85:         frameBuffer = gfx::Framebuffer::Create(877, 561);
         86:         frameBuffer->AddColorAttachment(gfx::Framebuffer::AttachmentType::Texture, gfx::Texture::Format::RGBA8);
         87:         frameBuffer->SetDepthAttachment(gfx::Framebuffer::AttachmentType::Renderbuffer, gfx::Texture::Format::None);
#5    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\renderer\Framebuffer.cpp", line 13, in hydro::gfx::Framebuffer::Create
         10:     std::shared_ptr<Framebuffer> Framebuffer::Create(unsigned int width, unsigned int height)
         11:     {
         12:         switch (RendererAPI::GetAPI()) {
      >  13:         case RendererAPI::APIType::OpenGL: return std::make_shared<OpenGLFramebuffer>(width, height);
         14:         }
         15: 
         16:         hass(false).msg(L"Invalid API Type");
#4    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2906, in std::make_shared<hydro::gfx::OpenGLFramebuffer,unsigned int &,unsigned int &>
       2903: template <class _Ty, class... _Types>
       2904: #endif // ^^^ !_HAS_CXX20 ^^^
       2905: _NODISCARD_SMART_PTR_ALLOC shared_ptr<_Ty> make_shared(_Types&&... _Args) { // make a shared_ptr to non-array object
      >2906:     const auto _Rx = new _Ref_count_obj2<_Ty>(_STD forward<_Types>(_Args)...);
       2907:     shared_ptr<_Ty> _Ret;
       2908:     _Ret._Set_ptr_rep_and_enable_shared(_STD addressof(_Rx->_Storage._Value), _Rx);
       2909:     return _Ret;
#3    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2095, in std::_Ref_count_obj2<hydro::gfx::OpenGLFramebuffer>::_Ref_count_obj2<hydro::gfx::OpenGLFramebuffer><unsigned int &,unsigned int &>
       2092:         } else
       2093: #endif // _HAS_CXX20
       2094:         {
      >2095:             _STD _Construct_in_place(_Storage._Value, _STD forward<_Types>(_Args)...);
       2096:         }
       2097:     }
#2    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xutility", line 406, in std::_Construct_in_place<hydro::gfx::OpenGLFramebuffer,unsigned int &,unsigned int &>
        403:     } else
        404: #endif // _HAS_CXX20
        405:     {
      > 406:         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
        407:     }
        408: }
#1    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\API\OpenGl\OpenGLFramebuffer.cpp", line 11, in hydro::gfx::OpenGLFramebuffer::OpenGLFramebuffer
          8:         : width_(width), height_(height)
          9:     {
         10:         glGenFramebuffers(1, &fbo_);
      >  11:         Validate();
         12:     }
         13: 
         14:     OpenGLFramebuffer::~OpenGLFramebuffer()
#0    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\API\OpenGl\OpenGLFramebuffer.cpp", line 207, in hydro::gfx::OpenGLFramebuffer::Validate
        204:         glDrawBuffers(static_cast<GLsizei>(drawBuffers.size()), drawBuffers.data());
        205: 
        206:         auto status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
      > 207:         hass(status == GL_FRAMEBUFFER_COMPLETE).msg(L"Framebuffer is incomplete!");
        208: 
        209:         glBindFramebuffer(GL_FRAMEBUFFER, 0);
        210:     }

@Fatal {2025-06-25 21:02:32.3351248 GMT+2} Assertion Failed! status == 0x8CD5
  Msg: Framebuffer is incomplete!

  >> at hydro::gfx::OpenGLFramebuffer::Validate
     C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\API\OpenGl\OpenGLFramebuffer.cpp(207)
Stack trace (most recent call last):
#12   Object "", at 00007FFE6FD3259D, in BaseThreadInitThunk
#11   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_main.cpp", line 17, in mainCRTStartup
#10   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 331, in __scrt_common_main
#9    Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 288, in __scrt_common_main_seh
#8    Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 79, in invoke_main
#7    Source "C:\Users\vikto\Desktop\Hydro\Editor\src\App.cpp", line 26, in main
         23: {
         24: 	Boot();
         25: 
      >  26: 	ioc::Get().Resolve<runtime::IRuntime>()->Run();
         27: 
         28: 	return 0;
         29: }
#6    Source "C:\Users\vikto\Desktop\Hydro\Editor\src\EditorRuntime.cpp", line 85, in hydro::runtime::EditorRuntime::Run
         82:         //Shaders
         83:         shader = gfx::Shader::Create(std::filesystem::path{"Shaders/vertexShader.glsl"}, "Shaders/fragmentShader.glsl");
         84: 
      >  85:         frameBuffer = gfx::Framebuffer::Create(877, 561);
         86:         frameBuffer->AddColorAttachment(gfx::Framebuffer::AttachmentType::Texture, gfx::Texture::Format::RGBA8);
         87:         frameBuffer->SetDepthAttachment(gfx::Framebuffer::AttachmentType::Renderbuffer, gfx::Texture::Format::None);
#5    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\renderer\Framebuffer.cpp", line 13, in hydro::gfx::Framebuffer::Create
         10:     std::shared_ptr<Framebuffer> Framebuffer::Create(unsigned int width, unsigned int height)
         11:     {
         12:         switch (RendererAPI::GetAPI()) {
      >  13:         case RendererAPI::APIType::OpenGL: return std::make_shared<OpenGLFramebuffer>(width, height);
         14:         }
         15: 
         16:         hass(false).msg(L"Invalid API Type");
#4    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2906, in std::make_shared<hydro::gfx::OpenGLFramebuffer,unsigned int &,unsigned int &>
       2903: template <class _Ty, class... _Types>
       2904: #endif // ^^^ !_HAS_CXX20 ^^^
       2905: _NODISCARD_SMART_PTR_ALLOC shared_ptr<_Ty> make_shared(_Types&&... _Args) { // make a shared_ptr to non-array object
      >2906:     const auto _Rx = new _Ref_count_obj2<_Ty>(_STD forward<_Types>(_Args)...);
       2907:     shared_ptr<_Ty> _Ret;
       2908:     _Ret._Set_ptr_rep_and_enable_shared(_STD addressof(_Rx->_Storage._Value), _Rx);
       2909:     return _Ret;
#3    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2095, in std::_Ref_count_obj2<hydro::gfx::OpenGLFramebuffer>::_Ref_count_obj2<hydro::gfx::OpenGLFramebuffer><unsigned int &,unsigned int &>
       2092:         } else
       2093: #endif // _HAS_CXX20
       2094:         {
      >2095:             _STD _Construct_in_place(_Storage._Value, _STD forward<_Types>(_Args)...);
       2096:         }
       2097:     }
#2    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xutility", line 406, in std::_Construct_in_place<hydro::gfx::OpenGLFramebuffer,unsigned int &,unsigned int &>
        403:     } else
        404: #endif // _HAS_CXX20
        405:     {
      > 406:         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
        407:     }
        408: }
#1    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\API\OpenGl\OpenGLFramebuffer.cpp", line 11, in hydro::gfx::OpenGLFramebuffer::OpenGLFramebuffer
          8:         : width_(width), height_(height)
          9:     {
         10:         glGenFramebuffers(1, &fbo_);
      >  11:         Validate();
         12:     }
         13: 
         14:     OpenGLFramebuffer::~OpenGLFramebuffer()
#0    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\API\OpenGl\OpenGLFramebuffer.cpp", line 207, in hydro::gfx::OpenGLFramebuffer::Validate
        204:         glDrawBuffers(static_cast<GLsizei>(drawBuffers.size()), drawBuffers.data());
        205: 
        206:         auto status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
      > 207:         hass(status == GL_FRAMEBUFFER_COMPLETE).msg(L"Framebuffer is incomplete!");
        208: 
        209:         glBindFramebuffer(GL_FRAMEBUFFER, 0);
        210:     }

@Fatal {2025-06-25 21:04:09.2764833 GMT+2} Assertion Failed! index >= colorAttachments_.size()
  Msg: Invalid index

  >> at hydro::gfx::OpenGLFramebuffer::GetColorAttachment
     C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\API\OpenGl\OpenGLFramebuffer.cpp(181)
Stack trace (most recent call last):
#7    Object "", at 00007FFE6FD3259D, in BaseThreadInitThunk
#6    Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_main.cpp", line 17, in mainCRTStartup
#5    Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 331, in __scrt_common_main
#4    Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 288, in __scrt_common_main_seh
#3    Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 79, in invoke_main
#2    Source "C:\Users\vikto\Desktop\Hydro\Editor\src\App.cpp", line 26, in main
         23: {
         24: 	Boot();
         25: 
      >  26: 	ioc::Get().Resolve<runtime::IRuntime>()->Run();
         27: 
         28: 	return 0;
         29: }
#1    Source "C:\Users\vikto\Desktop\Hydro\Editor\src\EditorRuntime.cpp", line 123, in hydro::runtime::EditorRuntime::Run
        120:             ImGui::Begin("Viewport");
        121:             ImVec2 viewportSize = ImGui::GetContentRegionAvail();
        122:             OPENGL(viewportSize.x,viewportSize.y);
      > 123:             ImGui::Image((ImTextureID)frameBuffer->GetColorAttachment(0)->GetNativeHandle(), ImVec2(viewportSize.x, viewportSize.y), ImVec2(0, 1), ImVec2(1, 0));
        124:             ImGui::End();
        125:             ImGui::PopStyleVar(2);
#0    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\gfx\API\OpenGl\OpenGLFramebuffer.cpp", line 181, in hydro::gfx::OpenGLFramebuffer::GetColorAttachment
        179:     std::shared_ptr<Texture> OpenGLFramebuffer::GetColorAttachment(size_t index) const
        180:     {
      > 181:         hchk(index >= colorAttachments_.size()).msg(L"Invalid index");
        182:         if (index >= colorAttachments_.size())
        183:             return nullptr;
        184:         return colorAttachments_[index].texture;

