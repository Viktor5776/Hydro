@Fatal {2025-06-10 22:56:45.8191522 GMT+2} Assertion Failed! !HasComponents<T>()
  Msg: Entity has component!

  >> at hydro::scene::Entity::AddComponent
     C:\Users\vikto\Desktop\Hydro\Engine\src\Core\scene\Entity.h(18)
Stack trace (most recent call last):
#17   Object "", at 00007FFDD9FC259D, in BaseThreadInitThunk
#16   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_main.cpp", line 17, in mainCRTStartup
#15   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 331, in __scrt_common_main
#14   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 288, in __scrt_common_main_seh
#13   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 79, in invoke_main
#12   Source "C:\Users\vikto\Desktop\Hydro\Sandbox\src\App.cpp", line 25, in main
         22: {
         23: 	Boot();
         24: 
      >  25: 	ioc::Get().Resolve<runtime::IRuntime>()->Run();
         26: 	
         27: 	return 0;
         28: }
#11   Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\ioc\Container.h", line 51, in hydro::ioc::Container::Resolve<hydro::runtime::IRuntime>
         48: 		template<NotParameterized T>
         49: 		std::shared_ptr<T> Resolve() const
         50: 		{
      >  51: 			return Resolve_<T, Generator<T>>();
         52: 		}
         53: 	private:
         54: 		// functions
#10   Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\ioc\Container.h", line 61, in hydro::ioc::Container::Resolve_<hydro::runtime::IRuntime,std::function<std::shared_ptr<hydro::runtime::IRuntime> __cdecl(void)> >
         58: 			if (const auto i = serviceMap_.find(typeid(T)); i != serviceMap_.end()) {
         59: 				const auto& entry = i->second;
         60: 				try {
      >  61: 					return std::any_cast<G>(entry)(std::forward<Ps>(arg)...);
         62: 				}
         63: 				catch (const std::bad_any_cast&) {
         64: 					hchk_fail.msg(std::format(
#9    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\functional", line 920, in std::_Func_class<std::shared_ptr<hydro::runtime::IRuntime> >::operator()
        917:             _Xbad_function_call();
        918:         }
        919:         const auto _Impl = _Getimpl();
      > 920:         return _Impl->_Do_call(_STD forward<_Types>(_Args)...);
        921:     }
        922: 
        923:     ~_Func_class() noexcept {
#8    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\functional", line 876, in std::_Func_impl_no_alloc<`Boot'::`2'::<lambda_1>,std::shared_ptr<hydro::runtime::IRuntime> >::_Do_call
        873:         if constexpr (is_void_v<_Rx>) {
        874:             (void) _STD invoke(_Callee, _STD forward<_Types>(_Args)...);
        875:         } else {
      > 876:             return _STD invoke(_Callee, _STD forward<_Types>(_Args)...);
        877:         }
        878:     }
#7    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\type_traits", line 1695, in std::invoke<`Boot'::`2'::<lambda_1> &>
       1692: _EXPORT_STD template <class _Callable>
       1693: constexpr auto invoke(_Callable&& _Obj) noexcept(noexcept(static_cast<_Callable&&>(_Obj)()))
       1694:     -> decltype(static_cast<_Callable&&>(_Obj)()) {
      >1695:     return static_cast<_Callable&&>(_Obj)();
       1696: }
       1697: 
       1698: _EXPORT_STD template <class _Callable, class _Ty1, class... _Types2>
#6    Source "C:\Users\vikto\Desktop\Hydro\Sandbox\src\App.cpp", line 16, in `Boot'::`2'::<lambda_1>::operator()
         13: 	log::Boot();
         14: 
         15: 	ioc::Get().Register<runtime::IRuntime>([] {
      >  16: 		return std::make_shared<runtime::BaseRuntime>("Base Window");
         17: 	});
         18: 	
         19: }
#5    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2906, in std::make_shared<hydro::runtime::BaseRuntime,char const (&)[12]>
       2903: template <class _Ty, class... _Types>
       2904: #endif // ^^^ !_HAS_CXX20 ^^^
       2905: _NODISCARD_SMART_PTR_ALLOC shared_ptr<_Ty> make_shared(_Types&&... _Args) { // make a shared_ptr to non-array object
      >2906:     const auto _Rx = new _Ref_count_obj2<_Ty>(_STD forward<_Types>(_Args)...);
       2907:     shared_ptr<_Ty> _Ret;
       2908:     _Ret._Set_ptr_rep_and_enable_shared(_STD addressof(_Rx->_Storage._Value), _Rx);
       2909:     return _Ret;
#4    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2095, in std::_Ref_count_obj2<hydro::runtime::BaseRuntime>::_Ref_count_obj2<hydro::runtime::BaseRuntime><char const (&)[12]>
       2092:         } else
       2093: #endif // _HAS_CXX20
       2094:         {
      >2095:             _STD _Construct_in_place(_Storage._Value, _STD forward<_Types>(_Args)...);
       2096:         }
       2097:     }
#3    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xutility", line 406, in std::_Construct_in_place<hydro::runtime::BaseRuntime,char const (&)[12]>
        403:     } else
        404: #endif // _HAS_CXX20
        405:     {
      > 406:         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
        407:     }
        408: }
#2    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\runtime\BaseRuntime.cpp", line 17, in hydro::runtime::BaseRuntime::BaseRuntime
         14:         scene_("Scene")
         15:     {
         16: 
      >  17:         scene_.Deserialize("firstScene.json");
         18: 
         19:         //Init with SDL Window manager
         20:         ioc::Get().Register<win::IWindow>([=] {
#1    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\scene\SceneSerialize.cpp", line 64, in hydro::scene::Scene::Deserialize
         61: 				Entity entity = CreateEntity();
         62: 
         63: 				if (entityJson.contains("Tag")) {
      >  64: 					auto& tag = entity.AddComponent<TagComponent>();
         65: 					tag.Tag = entityJson["Tag"].get<std::string>();
         66: 				}
#0    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\scene\Entity.h", line 18, in hydro::scene::Entity::AddComponent<hydro::TagComponent>
         15: 		template<typename T, typename... Args>
         16: 		T& AddComponent(Args&&... args)
         17: 		{
      >  18: 			hass(!HasComponents<T>()).msg(L"Entity has component!");
         19: 			return scene_->registry_.emplace<T>(entityHandle_, std::forward<Args>(args)...);
         20: 		}

@Fatal {2025-06-10 22:57:37.1831587 GMT+2} Assertion Failed! !HasComponents<T>()
  Msg: Entity has component!

  >> at hydro::scene::Entity::AddComponent
     C:\Users\vikto\Desktop\Hydro\Engine\src\Core\scene\Entity.h(18)
Stack trace (most recent call last):
#17   Object "", at 00007FFDD9FC259D, in BaseThreadInitThunk
#16   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_main.cpp", line 17, in mainCRTStartup
#15   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 331, in __scrt_common_main
#14   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 288, in __scrt_common_main_seh
#13   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 79, in invoke_main
#12   Source "C:\Users\vikto\Desktop\Hydro\Sandbox\src\App.cpp", line 25, in main
         22: {
         23: 	Boot();
         24: 
      >  25: 	ioc::Get().Resolve<runtime::IRuntime>()->Run();
         26: 	
         27: 	return 0;
         28: }
#11   Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\ioc\Container.h", line 51, in hydro::ioc::Container::Resolve<hydro::runtime::IRuntime>
         48: 		template<NotParameterized T>
         49: 		std::shared_ptr<T> Resolve() const
         50: 		{
      >  51: 			return Resolve_<T, Generator<T>>();
         52: 		}
         53: 	private:
         54: 		// functions
#10   Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\ioc\Container.h", line 61, in hydro::ioc::Container::Resolve_<hydro::runtime::IRuntime,std::function<std::shared_ptr<hydro::runtime::IRuntime> __cdecl(void)> >
         58: 			if (const auto i = serviceMap_.find(typeid(T)); i != serviceMap_.end()) {
         59: 				const auto& entry = i->second;
         60: 				try {
      >  61: 					return std::any_cast<G>(entry)(std::forward<Ps>(arg)...);
         62: 				}
         63: 				catch (const std::bad_any_cast&) {
         64: 					hchk_fail.msg(std::format(
#9    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\functional", line 920, in std::_Func_class<std::shared_ptr<hydro::runtime::IRuntime> >::operator()
        917:             _Xbad_function_call();
        918:         }
        919:         const auto _Impl = _Getimpl();
      > 920:         return _Impl->_Do_call(_STD forward<_Types>(_Args)...);
        921:     }
        922: 
        923:     ~_Func_class() noexcept {
#8    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\functional", line 876, in std::_Func_impl_no_alloc<`Boot'::`2'::<lambda_1>,std::shared_ptr<hydro::runtime::IRuntime> >::_Do_call
        873:         if constexpr (is_void_v<_Rx>) {
        874:             (void) _STD invoke(_Callee, _STD forward<_Types>(_Args)...);
        875:         } else {
      > 876:             return _STD invoke(_Callee, _STD forward<_Types>(_Args)...);
        877:         }
        878:     }
#7    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\type_traits", line 1695, in std::invoke<`Boot'::`2'::<lambda_1> &>
       1692: _EXPORT_STD template <class _Callable>
       1693: constexpr auto invoke(_Callable&& _Obj) noexcept(noexcept(static_cast<_Callable&&>(_Obj)()))
       1694:     -> decltype(static_cast<_Callable&&>(_Obj)()) {
      >1695:     return static_cast<_Callable&&>(_Obj)();
       1696: }
       1697: 
       1698: _EXPORT_STD template <class _Callable, class _Ty1, class... _Types2>
#6    Source "C:\Users\vikto\Desktop\Hydro\Sandbox\src\App.cpp", line 16, in `Boot'::`2'::<lambda_1>::operator()
         13: 	log::Boot();
         14: 
         15: 	ioc::Get().Register<runtime::IRuntime>([] {
      >  16: 		return std::make_shared<runtime::BaseRuntime>("Base Window");
         17: 	});
         18: 	
         19: }
#5    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2906, in std::make_shared<hydro::runtime::BaseRuntime,char const (&)[12]>
       2903: template <class _Ty, class... _Types>
       2904: #endif // ^^^ !_HAS_CXX20 ^^^
       2905: _NODISCARD_SMART_PTR_ALLOC shared_ptr<_Ty> make_shared(_Types&&... _Args) { // make a shared_ptr to non-array object
      >2906:     const auto _Rx = new _Ref_count_obj2<_Ty>(_STD forward<_Types>(_Args)...);
       2907:     shared_ptr<_Ty> _Ret;
       2908:     _Ret._Set_ptr_rep_and_enable_shared(_STD addressof(_Rx->_Storage._Value), _Rx);
       2909:     return _Ret;
#4    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2095, in std::_Ref_count_obj2<hydro::runtime::BaseRuntime>::_Ref_count_obj2<hydro::runtime::BaseRuntime><char const (&)[12]>
       2092:         } else
       2093: #endif // _HAS_CXX20
       2094:         {
      >2095:             _STD _Construct_in_place(_Storage._Value, _STD forward<_Types>(_Args)...);
       2096:         }
       2097:     }
#3    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xutility", line 406, in std::_Construct_in_place<hydro::runtime::BaseRuntime,char const (&)[12]>
        403:     } else
        404: #endif // _HAS_CXX20
        405:     {
      > 406:         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
        407:     }
        408: }
#2    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\runtime\BaseRuntime.cpp", line 17, in hydro::runtime::BaseRuntime::BaseRuntime
         14:         scene_("Scene")
         15:     {
         16: 
      >  17:         scene_.Deserialize("firstScene.json");
         18: 
         19:         //Init with SDL Window manager
         20:         ioc::Get().Register<win::IWindow>([=] {
#1    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\scene\SceneSerialize.cpp", line 64, in hydro::scene::Scene::Deserialize
         61: 				Entity entity = CreateEntity();
         62: 
         63: 				if (entityJson.contains("Tag")) {
      >  64: 					auto& tag = entity.AddComponent<TagComponent>();
         65: 					tag.Tag = entityJson["Tag"].get<std::string>();
         66: 				}
#0    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\scene\Entity.h", line 18, in hydro::scene::Entity::AddComponent<hydro::TagComponent>
         15: 		template<typename T, typename... Args>
         16: 		T& AddComponent(Args&&... args)
         17: 		{
      >  18: 			hass(!HasComponents<T>()).msg(L"Entity has component!");
         19: 			return scene_->registry_.emplace<T>(entityHandle_, std::forward<Args>(args)...);
         20: 		}

@Fatal {2025-06-10 22:57:46.9092798 GMT+2} Assertion Failed! !HasComponents<T>()
  Msg: Entity has component!

  >> at hydro::scene::Entity::AddComponent
     C:\Users\vikto\Desktop\Hydro\Engine\src\Core\scene\Entity.h(18)
Stack trace (most recent call last):
#17   Object "", at 00007FFDD9FC259D, in BaseThreadInitThunk
#16   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_main.cpp", line 17, in mainCRTStartup
#15   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 331, in __scrt_common_main
#14   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 288, in __scrt_common_main_seh
#13   Source "D:\a\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl", line 79, in invoke_main
#12   Source "C:\Users\vikto\Desktop\Hydro\Sandbox\src\App.cpp", line 25, in main
         22: {
         23: 	Boot();
         24: 
      >  25: 	ioc::Get().Resolve<runtime::IRuntime>()->Run();
         26: 	
         27: 	return 0;
         28: }
#11   Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\ioc\Container.h", line 51, in hydro::ioc::Container::Resolve<hydro::runtime::IRuntime>
         48: 		template<NotParameterized T>
         49: 		std::shared_ptr<T> Resolve() const
         50: 		{
      >  51: 			return Resolve_<T, Generator<T>>();
         52: 		}
         53: 	private:
         54: 		// functions
#10   Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\ioc\Container.h", line 61, in hydro::ioc::Container::Resolve_<hydro::runtime::IRuntime,std::function<std::shared_ptr<hydro::runtime::IRuntime> __cdecl(void)> >
         58: 			if (const auto i = serviceMap_.find(typeid(T)); i != serviceMap_.end()) {
         59: 				const auto& entry = i->second;
         60: 				try {
      >  61: 					return std::any_cast<G>(entry)(std::forward<Ps>(arg)...);
         62: 				}
         63: 				catch (const std::bad_any_cast&) {
         64: 					hchk_fail.msg(std::format(
#9    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\functional", line 920, in std::_Func_class<std::shared_ptr<hydro::runtime::IRuntime> >::operator()
        917:             _Xbad_function_call();
        918:         }
        919:         const auto _Impl = _Getimpl();
      > 920:         return _Impl->_Do_call(_STD forward<_Types>(_Args)...);
        921:     }
        922: 
        923:     ~_Func_class() noexcept {
#8    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\functional", line 876, in std::_Func_impl_no_alloc<`Boot'::`2'::<lambda_1>,std::shared_ptr<hydro::runtime::IRuntime> >::_Do_call
        873:         if constexpr (is_void_v<_Rx>) {
        874:             (void) _STD invoke(_Callee, _STD forward<_Types>(_Args)...);
        875:         } else {
      > 876:             return _STD invoke(_Callee, _STD forward<_Types>(_Args)...);
        877:         }
        878:     }
#7    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\type_traits", line 1695, in std::invoke<`Boot'::`2'::<lambda_1> &>
       1692: _EXPORT_STD template <class _Callable>
       1693: constexpr auto invoke(_Callable&& _Obj) noexcept(noexcept(static_cast<_Callable&&>(_Obj)()))
       1694:     -> decltype(static_cast<_Callable&&>(_Obj)()) {
      >1695:     return static_cast<_Callable&&>(_Obj)();
       1696: }
       1697: 
       1698: _EXPORT_STD template <class _Callable, class _Ty1, class... _Types2>
#6    Source "C:\Users\vikto\Desktop\Hydro\Sandbox\src\App.cpp", line 16, in `Boot'::`2'::<lambda_1>::operator()
         13: 	log::Boot();
         14: 
         15: 	ioc::Get().Register<runtime::IRuntime>([] {
      >  16: 		return std::make_shared<runtime::BaseRuntime>("Base Window");
         17: 	});
         18: 	
         19: }
#5    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2906, in std::make_shared<hydro::runtime::BaseRuntime,char const (&)[12]>
       2903: template <class _Ty, class... _Types>
       2904: #endif // ^^^ !_HAS_CXX20 ^^^
       2905: _NODISCARD_SMART_PTR_ALLOC shared_ptr<_Ty> make_shared(_Types&&... _Args) { // make a shared_ptr to non-array object
      >2906:     const auto _Rx = new _Ref_count_obj2<_Ty>(_STD forward<_Types>(_Args)...);
       2907:     shared_ptr<_Ty> _Ret;
       2908:     _Ret._Set_ptr_rep_and_enable_shared(_STD addressof(_Rx->_Storage._Value), _Rx);
       2909:     return _Ret;
#4    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\memory", line 2095, in std::_Ref_count_obj2<hydro::runtime::BaseRuntime>::_Ref_count_obj2<hydro::runtime::BaseRuntime><char const (&)[12]>
       2092:         } else
       2093: #endif // _HAS_CXX20
       2094:         {
      >2095:             _STD _Construct_in_place(_Storage._Value, _STD forward<_Types>(_Args)...);
       2096:         }
       2097:     }
#3    Source "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.42.34433\include\xutility", line 406, in std::_Construct_in_place<hydro::runtime::BaseRuntime,char const (&)[12]>
        403:     } else
        404: #endif // _HAS_CXX20
        405:     {
      > 406:         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
        407:     }
        408: }
#2    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\runtime\BaseRuntime.cpp", line 17, in hydro::runtime::BaseRuntime::BaseRuntime
         14:         scene_("Scene")
         15:     {
         16: 
      >  17:         scene_.Deserialize("firstScene.json");
         18: 
         19:         //Init with SDL Window manager
         20:         ioc::Get().Register<win::IWindow>([=] {
#1    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\scene\SceneSerialize.cpp", line 64, in hydro::scene::Scene::Deserialize
         61: 				Entity entity = CreateEntity();
         62: 
         63: 				if (entityJson.contains("Tag")) {
      >  64: 					auto& tag = entity.AddComponent<TagComponent>();
         65: 					tag.Tag = entityJson["Tag"].get<std::string>();
         66: 				}
#0    Source "C:\Users\vikto\Desktop\Hydro\Engine\src\Core\scene\Entity.h", line 18, in hydro::scene::Entity::AddComponent<hydro::TagComponent>
         15: 		template<typename T, typename... Args>
         16: 		T& AddComponent(Args&&... args)
         17: 		{
      >  18: 			hass(!HasComponents<T>()).msg(L"Entity has component!");
         19: 			return scene_->registry_.emplace<T>(entityHandle_, std::forward<Args>(args)...);
         20: 		}

